{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GRIB specificities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-15T16:23:00.539531Z",
     "iopub.status.busy": "2024-05-15T16:23:00.538537Z",
     "iopub.status.idle": "2024-05-15T16:23:00.900297Z",
     "shell.execute_reply": "2024-05-15T16:23:00.900008Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# for figures in notebook\n",
    "\n",
    "# import & initialize epygram\n",
    "import epygram\n",
    "epygram.init_env()\n",
    "\n",
    "import os\n",
    "INPUTS_DIR = os.path.join('..', 'inputs')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-15T16:23:00.904231Z",
     "iopub.status.busy": "2024-05-15T16:23:00.903309Z",
     "iopub.status.idle": "2024-05-15T16:23:00.907502Z",
     "shell.execute_reply": "2024-05-15T16:23:00.907063Z"
    }
   },
   "outputs": [],
   "source": [
    "r = epygram.formats.resource(os.path.join(INPUTS_DIR, 'grid.arome-forecast.guyane0025+0000:00.grib'), 'r')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Several ways of iterating over all fields/messages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-15T16:23:00.910017Z",
     "iopub.status.busy": "2024-05-15T16:23:00.909767Z",
     "iopub.status.idle": "2024-05-15T16:23:02.438053Z",
     "shell.execute_reply": "2024-05-15T16:23:02.437773Z"
    }
   },
   "outputs": [],
   "source": [
    "# Actual iterator, returns H2DField's\n",
    "n = 0\n",
    "for f in r:\n",
    "    n += 1\n",
    "print(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-15T16:23:02.442522Z",
     "iopub.status.busy": "2024-05-15T16:23:02.442190Z",
     "iopub.status.idle": "2024-05-15T16:23:02.443178Z",
     "shell.execute_reply": "2024-05-15T16:23:02.443374Z"
    }
   },
   "outputs": [],
   "source": [
    "# Manual iteration on fields\n",
    "n = 0\n",
    "while True:\n",
    "    f = r.iter_fields()\n",
    "    if f is None:\n",
    "        break\n",
    "    elif n == 0:\n",
    "        print(type(f))\n",
    "    n += 1\n",
    "print(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-15T16:23:02.446642Z",
     "iopub.status.busy": "2024-05-15T16:23:02.446352Z",
     "iopub.status.idle": "2024-05-15T16:23:02.551982Z",
     "shell.execute_reply": "2024-05-15T16:23:02.551777Z"
    }
   },
   "outputs": [],
   "source": [
    "# Manual iterator on messages; returns epygram.formats.GRIB.GRIBmessage objects, i.e. data is not decoded\n",
    "n = 0\n",
    "while True:\n",
    "    m = r.iter_messages()\n",
    "    if m is None:\n",
    "        break\n",
    "    elif n == 0:\n",
    "        print(type(m))\n",
    "    n += 1\n",
    "print(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-15T16:23:02.555524Z",
     "iopub.status.busy": "2024-05-15T16:23:02.555112Z",
     "iopub.status.idle": "2024-05-15T16:23:02.560898Z",
     "shell.execute_reply": "2024-05-15T16:23:02.560556Z"
    }
   },
   "outputs": [],
   "source": [
    "# Pick message at a certain index\n",
    "m = r.get_message_at_position(15)\n",
    "print(type(m))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-15T16:23:02.565002Z",
     "iopub.status.busy": "2024-05-15T16:23:02.563157Z",
     "iopub.status.idle": "2024-05-15T16:23:02.746087Z",
     "shell.execute_reply": "2024-05-15T16:23:02.745883Z"
    }
   },
   "outputs": [],
   "source": [
    "# in a GRIBmessage, GRIB key/values are read only when requested one by one,\n",
    "print(list(m.keys()))\n",
    "print('centre', m.get('centre'))\n",
    "print('typeOfProcessedData', m['typeOfProcessedData'])\n",
    "print(list(m.keys()))\n",
    "# or if the whole message is requested to be read\n",
    "m.readmessage()\n",
    "print(list(m.keys())[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-15T16:23:02.750502Z",
     "iopub.status.busy": "2024-05-15T16:23:02.749993Z",
     "iopub.status.idle": "2024-05-15T16:23:02.752061Z",
     "shell.execute_reply": "2024-05-15T16:23:02.751830Z"
    }
   },
   "outputs": [],
   "source": [
    "# Message can then be transformed into epygram H2DField\n",
    "f = m.as_field()\n",
    "print(type(f))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-15T16:23:02.754946Z",
     "iopub.status.busy": "2024-05-15T16:23:02.754696Z",
     "iopub.status.idle": "2024-05-15T16:23:03.054668Z",
     "shell.execute_reply": "2024-05-15T16:23:03.054415Z"
    }
   },
   "outputs": [],
   "source": [
    "# And to find what are the fields present with a partial filter\n",
    "r.find_fields_in_resource('shortName:2t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
